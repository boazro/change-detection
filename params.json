{
  "name": "Change-detection",
  "tagline": "Compare change detection in javascript frameworks",
  "body": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"utf-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n    <meta name=\"description\" content=\"\">\r\n    <meta name=\"author\" content=\"\">\r\n\r\n    <title>Change Detection Presention</title>\r\n\r\n    <!-- Bootstrap Core CSS -->\r\n    <link href=\"css/bootstrap.min.css\" rel=\"stylesheet\">\r\n\r\n    <!-- Custom CSS -->\r\n    <link href=\"css/flipclock.css\" rel=\"stylesheet\" >\r\n    <link href=\"css/scrolling-nav.css\" rel=\"stylesheet\">\r\n\r\n    <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->\r\n    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->\r\n    <!--[if lt IE 9]>\r\n        <script src=\"https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js\"></script>\r\n        <script src=\"https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js\"></script>\r\n    <![endif]-->\r\n</head>\r\n\r\n<!-- The #page-top ID is part of the scrolling feature - the data-spy and data-target are part of the built-in Bootstrap scrollspy function -->\r\n\r\n\r\n<body id=\"page-top\" data-spy=\"scroll\" data-target=\".navbar-fixed-top\">\r\n\r\n    <!-- Navigation -->\r\n    <nav class=\"navbar navbar-default navbar-fixed-top\" role=\"navigation\">\r\n        <div class=\"container\">\r\n            <div class=\"navbar-header page-scroll\">\r\n                <button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\".navbar-ex1-collapse\">\r\n                    <span class=\"sr-only\">Toggle navigation</span>\r\n                    <span class=\"icon-bar\"></span>\r\n                    <span class=\"icon-bar\"></span>\r\n                    <span class=\"icon-bar\"></span>\r\n                </button>\r\n                <a class=\"navbar-brand page-scroll\" href=\"#page-top\">Start Here</a>\r\n            </div>\r\n\r\n            <!-- Collect the nav links, forms, and other content for toggling -->\r\n            <div class=\"collapse navbar-collapse navbar-ex1-collapse\">\r\n                <ul class=\"nav navbar-nav\">\r\n                    <!-- Hidden li included to remove active class from about link when scrolled up past about section -->\r\n                    <li class=\"hidden\">\r\n                        <a class=\"page-scroll\" href=\"#page-top\"></a>\r\n                    </li>\r\n                    <li>\r\n                        <a class=\"page-scroll\" href=\"#example-pure\">ToDo pure</a>\r\n                    </li>\r\n                    <li>\r\n                        <a class=\"page-scroll\" href=\"#rendering\">Rendering</a>\r\n                    </li>\r\n                    <li>\r\n                        <a class=\"page-scroll\" href=\"#changes\">Projecting Data</a>\r\n                    </li>\r\n                    <li>\r\n                        <a class=\"page-scroll\" href=\"#server-side\">Server side render</a>\r\n                    </li>\r\n                    \r\n                    <li>\r\n                        <a class=\"page-scroll\" href=\"#manual-side\">Manual changes</a>\r\n                    </li>\r\n                    <li>\r\n                        <a class=\"page-scroll\" href=\"#example-backbone\">Backbone.js</a>\r\n                    </li>\r\n                    <li>\r\n                        <a class=\"page-scroll\" href=\"#data-binding\">Data binding</a>\r\n                    </li>\r\n                    <li>\r\n                        <a class=\"page-scroll\" href=\"#example-ember\">Ember</a>\r\n                    </li>\r\n                    <li>\r\n                        <a class=\"page-scroll\" href=\"#dirty-checking\">Dirty checking</a>\r\n                    </li>\r\n                    <li>\r\n                        <a class=\"page-scroll\" href=\"#react1\">React 1</a>\r\n                    </li>\r\n                    <li>\r\n                        <a class=\"page-scroll\" href=\"#react2\">React 2</a>\r\n                    </li>\r\n                     <li>\r\n                        <a class=\"page-scroll\" href=\"#flux\">Flux</a>\r\n                    </li>\r\n                    <li>\r\n                        <a class=\"page-scroll\" href=\"#example-react\">React 3</a>\r\n                    </li>\r\n                    <li>\r\n                        <a class=\"page-scroll\" href=\"#immutable\">Immutable</a>\r\n                    </li>\r\n                    <li>\r\n                        <a class=\"page-scroll\" href=\"#example-immutable\">Redux</a>\r\n                    </li> \r\n                    <li>\r\n                        <a class=\"page-scroll\" href=\"#angular2\">angular2</a>\r\n                    </li> \r\n                </ul>\r\n                <img src=\"images/badge.jpg\" class=\"my-badge\">\r\n            </div>\r\n            <!-- /.navbar-collapse -->\r\n        </div>\r\n        <!-- /.container -->\r\n    </nav>\r\n\r\n    <!-- Intro Section -->\r\n    <section id=\"intro\" class=\"intro-section\">\r\n        <div class=\"container\">\r\n            <div class=\"row\">\r\n                <div class=\"col-lg-12\">\r\n                    <h1>Change Detaction history</h1>\r\n                    <h2>What causes change?</h2>\r\n                        \r\n                </div>\r\n\r\n                <div class=\"row\">\r\n                    <ul>\r\n                        <li><h3>Events - click, submit, â€¦</h3></li>\r\n                        <li><h3>XHR - Fetching data from a remote server</h3></li>\r\n                        <li><h3>Timers - setTimeout(), setInterval()</h3></li>\r\n                    </ul>\r\n                </div> \r\n\r\n            </div>\r\n        </div>\r\n    </section>\r\n\r\n     <!-- here show json of model (pre) and view of toDo list -->\r\n     <section id=\"example-pure\" class=\"example\">\r\n        <div class=\"container\">\r\n            <div class=\"row\">\r\n                <div class=\"col-lg-12\">\r\n                    <h1>ToDo List in pure Java Script</h1>\r\n                </div>          \r\n                <iframe\r\n                  style=\"width: 100%; height: 500px\"\r\n                  src=\"http://jsfiddle.net/boazRosen/hh6efyvd/11/embedded/result,html,js/dark/\">\r\n                </iframe>\r\n            </div>\r\n              \r\n        </div>\r\n    </section>\r\n     \r\n\r\n    <!-- rendering Section -->\r\n    <section id=\"rendering\" class=\"rendering-section\">\r\n        <div class=\"container\">\r\n            <div class=\"row\">\r\n                <div class=\"col-lg-12\">\r\n                    <h1>Rendering - Projecting data from Model to View</h1>\r\n                </div>\r\n            </div>\r\n            <div class=\"row\">\r\n                <img src=\"images/onchange_base.svg\" class=\"model-view-img\">\r\n            </div>         \r\n        </div>\r\n    </section>\r\n\r\n    <!-- change-section -->\r\n    <section id=\"changes\" class=\"change-section\">\r\n        <div class=\"container\">\r\n            <div class=\"row\">\r\n                <div class=\"col-lg-12\">                \r\n                    <h1>Changes</h1>\r\n                    <img src=\"images/onchange_change2.svg\" class=\"model-view-img\">\r\n                </div>\r\n            </div>  \r\n            <div class=\"row margin20\">                \r\n                <div class=\"col-lg-12\">\r\n                    <ul>\r\n                        <li><h3>user interacts with the UI -> change model -> change view</h3></li>\r\n                        <li><h3>Service response -> change model -> change view</h3></li>                  \r\n                                         \r\n                    </ul>\r\n                </div>\r\n            </div>\r\n            <div class=\"row\" >                \r\n                <div class=\"col-lg-12\">\r\n                    <h3><b>Motivation: </b></h3>\r\n                    <ul>\r\n                       <li><h3>DOM rebuild is expensive.</h3></li>                                      \r\n                       <li><h3>Sync model to view - code boilerplate.</h3></li>                                      \r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </section>\r\n\r\n    <!-- server-side -->\r\n    <section id=\"server-side\" class=\"server-side\">\r\n        <div class=\"container\">\r\n            <div class=\"row\">\r\n                <div class=\"col-lg-12\">\r\n                    <h1>Server-Side Rendering: Reset The Universe</h1>\r\n                    <h5 class=\"subtitle\">\"There is no change. The universe is immutable.\"</h5>\r\n                </div>\r\n                <div class=\"row\">\r\n                    <img src=\"images/onchange_reload3.svg\" class=\"model-view-img\">\r\n                </div>\r\n                <div class=\"col-lg-12\">\r\n                    <ul>\r\n                       <li><h3>simple client logic.</h3></li>                                      \r\n                       <li><h3>slow. Why?</h3></li>                                     \r\n                       <li><h3>full re-randering. don't care about maintaining model-view state</h3></li>                                     \r\n                    </ul>\r\n                </div> \r\n            </div>\r\n        </div>\r\n    </section> \r\n\r\n    <!-- manual Section -->\r\n    <section id=\"manual-side\" class=\"manual-side\">\r\n        <div class=\"container\">\r\n            <div class=\"row\">\r\n                <div class=\"col-lg-12\">\r\n                    <h1>First-gen JS: Manual Re-rendering</h1>\r\n                    <h5 class=\"subtitle\">\"I have no idea what I should re-render. You figure it out\"</h5>\r\n                </div>\r\n                <div class=\"row\">\r\n                    <img src=\"images/onchange_manual4.svg\" class=\"model-view-img\">\r\n                </div>\r\n                <div class=\"col-lg-12\">\r\n                    <ul>\r\n                       <li><h3>You control synchronization between Model and view.</h3></li>                                      \r\n                       <li><h3>You control what to re-rander and when.</h3></li>                                     \r\n                       <li><h3>More complex client logic.</h3></li>                                      \r\n                       <li><h3>Better performance.</h3></li>\r\n                       <li><h3>Manually figure out re-rendering when app state changes is <b>Hard</b>.</h3></li>                                      \r\n                    </ul>\r\n                </div> \r\n            </div>\r\n        </div>\r\n    </section>\r\n\r\n <!-- backbone -->\r\n     <section id=\"example-backbone\" class=\"backbone\">\r\n        <div class=\"container\">\r\n            <div class=\"row\">\r\n                <div class=\"col-lg-12\">\r\n                    <h1>Backbone.js 2010</h1>\r\n                </div>          \r\n                <iframe\r\n                  style=\"width: 100%; height: 500px\"\r\n                  src=\"http://jsfiddle.net/boazRosen/a4vm3tuj/13/embedded/result,html,js/dark/\">\r\n                </iframe>          \r\n            </div> \r\n        </div>\r\n    </section>\r\n\r\n     <!-- data binding -->\r\n    <section id=\"data-binding\" class=\"data-binding\">\r\n        <div class=\"container\">\r\n            <div class=\"row\">\r\n                <div class=\"col-lg-12\">\r\n                    <h1>Data Binding</h1>\r\n                    <h5 class=\"subtitle\">\"I know exactly what changed and what should be re-rendered because I control your models and views\"</h5>\r\n                </div>\r\n                <div class=\"row\">\r\n                    <img src=\"images/onchange_ember5.svg\" class=\"model-view-img\">\r\n                </div>\r\n                <div class=\"col-lg-12\">\r\n                    <h3><b>Ember.js 2011: </b></h3>\r\n                    <ul>\r\n                       <li><h3>Just like Backbone, sends out events from the data model when changes occur.</h3></li>\r\n                       <li><h3>What's new - binding through listener (update mechanism).</h3></li>\r\n                       <li><h3>Setting all the bindings up takes a bit of work.</h3></li>\r\n                       <li><h3>Use special objects that inherit from Ember's APIs.</h3></li>\r\n                       <li><h3>Use special setter methods. for example - <b>foo.set('x', 42)</b>.</h3></li>\r\n                    </ul>\r\n                </div> \r\n            </div>\r\n        </div>\r\n    </section>\r\n\r\n    <!-- ember -->\r\n     <section id=\"example-ember\" class=\"ember\">\r\n        <div class=\"container\">\r\n            <div class=\"row\">\r\n                <div class=\"col-lg-12\">\r\n                    <h1>Ember.js 2010</h1>\r\n                </div>          \r\n                <iframe\r\n                  style=\"width: 100%; height: 500px\"\r\n                  src=\"http://jsfiddle.net/boazRosen/xtf3xu8x/7/embedded/result,html,js/dark/\">\r\n                </iframe>          \r\n            </div> \r\n        </div>\r\n    </section>\r\n \r\n <!-- Dirty Checking -->\r\n    <section id=\"dirty-checking\" class=\"dirty-checking\">\r\n        <div class=\"container\">\r\n            <div class=\"row\">\r\n                <div class=\"col-lg-12\">\r\n                    <h1>AngularJS 2009: Dirty Checking</h1>\r\n                    <h5 class=\"subtitle\">\"I have no idea what changed, so I'll just check everything that may need updating\"</h5>\r\n                </div>\r\n                <div class=\"row\">\r\n                    <img src=\"images/onchange_angular_1_6.svg\" class=\"model-view-img\">\r\n                </div>\r\n                <div class=\"col-lg-12\">               \r\n                    <ul>\r\n                       <li><h3>creates a watcher for each of the properties.</h3></li>\r\n                       <li><h3><span style=\"color: green\">Good</span>: automatically check model changes and update view.</h3></li>\r\n                       <li><h3><span style=\"color: red\">Bad</span>: check everything all the time!!! more watchers more complex</h3></li> \r\n                       <li><h3><span style=\"color: red\">Bad</span>: don't know when digest ends</h3></li>              \r\n                    </ul>\r\n                </div> \r\n            </div>\r\n        </div>\r\n    </section>\r\n\r\n <!-- React: Virtual DOM -->\r\n    <section id=\"react1\" class=\"react1\">\r\n        <div class=\"container\">\r\n            <div class=\"row\">\r\n                <div class=\"col-lg-12\">\r\n                    <h1>Facebook React 2013: Virtual DOM</h1>\r\n                    <h5 class=\"subtitle\">\"I have no idea what changed so I'll just re-render everything and see what's different now\"</h5>\r\n                </div>\r\n                \r\n                <div class=\"col-lg-12\">               \r\n                    <ul>\r\n                       <li><h3>Similer to server side render. Don't care about maintaining model-view state!</h3></li>\r\n                       <li><h3>Renders the whole UI from scratch every time there may have been a change somewhere.</h3></li> \r\n                       <li><h3>Does not enforce a data model API.</h3></li>\r\n                       <li><h3>don't know when digest ends</h3></li>         \r\n                    </ul>\r\n                </div> \r\n\r\n                <div class=\"row\">\r\n                    <img src=\"images/onchange_react_7.svg\" class=\"model-view-img\">\r\n                </div>\r\n\r\n                 <div class=\"col-lg-12\">               \r\n                    <ul>\r\n                       <li><h3>First rendered into a virtual DOM light-weight, pure JavaScript data structure of plain objects and arrays that represents a real DOM object graph</h3></li>\r\n                       <li><h3>A separate process then takes that virtual DOM structure and creates the corresponding real DOM elements that are shown on the screen.</h3></li>          \r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </section>\r\n\r\n    <!-- React: Change detection -->\r\n    <section id=\"react2\" class=\"react2\">\r\n        <div class=\"container\">\r\n            <div class=\"row\">\r\n                <div class=\"col-lg-12\">\r\n                    <h1>React: Change Detection</h1>\r\n                </div>\r\n                \r\n                <div class=\"col-lg-12\">               \r\n                    <ul>\r\n                       <li><h3>When a change occurs, a new virtual DOM is created from scratch</h3></li>\r\n                       <li><h3>It then runs a diffing algorithm on the two virtual DOMs, to get the set of changes between them.</h3></li>\r\n                       <li><h3>Only those changes, are applied to the real DOM!</h3></li>               \r\n                    </ul>\r\n                </div> \r\n\r\n                <div class=\"row\">\r\n                    <img src=\"images/onchange_react_8.svg\" class=\"model-view-img\">\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </section>\r\n\r\n    <!-- React: Change detection -->\r\n    <section id=\"flux\" class=\"flux\">\r\n        <div class=\"container\">\r\n            <div class=\"row\">             \r\n                <h5>* Flux - unidirectional data flow</h5>\r\n                <h5>* State - used for <b>store</b> the shape of data both initially and upon user interaction.</h5>\r\n                <h5>* Props - used for passing data to child components.</h5>\r\n\r\n                <div class=\"row\" class=\"model-view-img\">\r\n                    <img src=\"images/flux-data-flow.png\">\r\n                </div>\r\n                \r\n            </div>\r\n        </div>\r\n    </section>\r\n\r\n    <!-- react examle -->\r\n     <section id=\"example-react\" class=\"react3\">\r\n        <div class=\"container\">\r\n            <div class=\"row\">\r\n                <div class=\"col-lg-12\">\r\n                    <h1>React</h1>\r\n                </div> \r\n                <iframe\r\n                  style=\"width: 100%; height: 500px\"\r\n                  src=\"http://jsfiddle.net/boazRosen/tsj7nvvq/13/embedded/result,html,js/dark/\">\r\n                </iframe>  \r\n\r\n                <h5>** Problem 1 - there's really no way around rendering the whole (virtual) DOM each time</h5>\r\n                <h5>** Problem 2 - as a limit of 60 re-rendering a secound.</h5>               \r\n            </div> \r\n        </div>\r\n    </section>\r\n\r\n\r\n     <!-- Immutable Data Structures -->\r\n    <section id=\"immutable\" class=\"immutable\">\r\n        <div class=\"container\">\r\n            <div class=\"row\">\r\n                <div class=\"col-lg-12\">\r\n                    <h1>Immutable Data Structures</h1>\r\n                    <h5 class=\"subtitle\">\"The simplest/fastest way to check whether an object has changed is to check whether itâ€™s the same object reference or not. (<b>oldObject === newObject</b>)\"</h5>\r\n                </div>\r\n                \r\n                \r\n\r\n                <div class=\"row\">\r\n                    <img src=\"images/onchange_immutable_9.svg\" class=\"model-view-img\">\r\n                </div>\r\n\r\n                <div class=\"col-lg-12\">               \r\n                    <ul>      \r\n                       <li><h3>Using this pattern: Immutable-js, OM.js, Redux.js, Freezer.js</h3></li>\r\n                       <li><h3></h3></li>               \r\n                    </ul>\r\n                </div> \r\n                           \r\n            </div>\r\n        </div>\r\n    </section>\r\n\r\n    <!-- immutable examle -->\r\n     <section id=\"example-immutable\" class=\"react3\">\r\n        <div class=\"container\">\r\n            <div class=\"row\">\r\n                <div class=\"col-lg-12\">\r\n                    <h1>React and Immutable.js example</h1>  \r\n                </div> \r\n                <iframe width=\"100%\" height=\"500px\" src=\"http://jsfiddle.net/boazRosen/h81eujmk/embedded/js,html,css,result/dark/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>     \r\n            </div> \r\n        </div>\r\n    </section>\r\n\r\n    <!-- angular2: Change detection -->\r\n    <section id=\"angular2\" class=\"angular2\">\r\n        <div class=\"container\">\r\n            <div class=\"row\">             \r\n               \r\n                \r\n                \r\n            </div>\r\n        </div>\r\n    </section>\r\n\r\n\r\n    <footer>\r\n        <div class=\"clock\"></div>\r\n    </footer>\r\n\r\n    <!-- jQuery -->\r\n    <script src=\"js/jquery.js\"></script>\r\n\r\n    <!-- Bootstrap Core JavaScript -->\r\n    <script src=\"js/bootstrap.min.js\"></script>\r\n\r\n    <!-- Scrolling Nav JavaScript -->\r\n    <script src=\"js/jquery.easing.min.js\"></script>\r\n    <script src=\"js/flipclock.min.js\"></script>\r\n    <script src=\"js/scrolling-nav.js\"></script>\r\n\r\n    <script type=\"text/javascript\">\r\n        \r\n        $(document).ready(function() {\r\n            var clock;\r\n\r\n            var lastHash;\r\n            var times = {\r\n                '#page-top': 0,\r\n                '#example-pure': 200,\r\n                '#rendering': 300,\r\n                '#changes': 400,\r\n                '#server-side': 500,\r\n                '#manual-side': 200,\r\n                '#example-backbone': 600,\r\n                '#data-binding': 700,\r\n                '#example-ember': 800,\r\n                '#dirty-checking': 800,\r\n                '#react1': 800,\r\n                '#react2': 800,\r\n                '#example-react': 800,\r\n                '#immutable': 800,\r\n            }\r\n        \r\n\r\n           $('a.page-scroll').bind('click', function(event) {\r\n                if(lastHash){\r\n                    console.log(lastHash + \": \" + clock.getTime());\r\n                    times[lastHash] = 0 || clock.getTime().time;\r\n                }\r\n\r\n                var $anchor = $(this);           \r\n                lastHash = $anchor.attr('href');\r\n                 \r\n                clock = $('.clock').FlipClock(times[lastHash], {\r\n                    clockFace: 'MinuteCounter',\r\n                    countdown: true,\r\n                    callbacks: {\r\n                        stop: function() {\r\n                            $('.message').html('The clock has stopped!');\r\n                        }\r\n                    }\r\n                });\r\n\r\n\r\n             \r\n            });\r\n\r\n        });\r\n        \r\n    </script>\r\n\r\n    <script>\r\n</script>\r\n\r\n</body>\r\n\r\n</html>\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}